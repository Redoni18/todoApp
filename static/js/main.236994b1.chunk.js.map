{"version":3,"sources":["firebase.js","Todo.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","margin","root","modal","display","alignItems","justifyContent","Todo","props","classes","useState","open","setOpen","input","setInput","Modal","className","onClose","e","FormControl","InputLabel","Input","placeholder","text","todo","value","onChange","Event","target","Button","disabled","variant","color","type","onClick","preventDefault","collection","doc","id","set","merge","List","ListItem","ListItemAvatar","ListItemText","primary","secondary","startIcon","delete","App","todos","setTodos","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","add","timestamp","FieldValue","serverTimestamp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.236994b1.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyB_bS56_QVNUzEzb1R4pBbNu9DUmO6-DzI\",\r\n    authDomain: \"todo-app-901ca.firebaseapp.com\",\r\n    databaseURL: \"https://todo-app-901ca.firebaseio.com\",\r\n    projectId: \"todo-app-901ca\",\r\n    storageBucket: \"todo-app-901ca.appspot.com\",\r\n    messagingSenderId: \"951505254878\",\r\n    appId: \"1:951505254878:web:756d4fd105ef3ce100854f\",\r\n    measurementId: \"G-EM21FZZ60Q\"\r\n});\r\n\r\nconst db = firebase.firestore();\r\n\r\nexport default db;\r\n","import React, {useState} from 'react'\r\nimport {List, ListItem, ListItemText, ListItemAvatar, Button, Modal, makeStyles, Input, FormControl, InputLabel} from '@material-ui/core';\r\nimport './Todo.css';\r\nimport db from './firebase';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport { light } from '@material-ui/core/styles/createPalette';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      position: 'absolute',\r\n      width: 400,\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '2px solid #000',\r\n      boxShadow: theme.shadows[5],\r\n      padding: theme.spacing(2, 4, 3),\r\n      '& > *': {\r\n        margin: theme.spacing(4),\r\n      },\r\n    },\r\n    root: {\r\n        '& > *': {\r\n          margin: theme.spacing(1),\r\n        },\r\n      },\r\n      modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n      },\r\n  }));\r\n\r\n\r\nfunction Todo(props) {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false);\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const [input, setInput] = useState('');\r\n    \r\n    const updateTodo = (Event) => {\r\n        Event.preventDefault();\r\n        db.collection('todos').doc(props.text.id).set({\r\n            todo: input\r\n        }, {merge: true})\r\n        setOpen(false)\r\n    };\r\n\r\n    return (\r\n        <>\r\n        <Modal\r\n            className={classes.modal}\r\n            open={open}\r\n            onClose={e => setOpen(false)}>\r\n                <div className={classes.paper}>\r\n                    <h1>Edit</h1>\r\n                    <form className={classes.root}>\r\n                        <FormControl>\r\n                            <InputLabel>Edit Todo</InputLabel>\r\n                            <Input placeholder={props.text.todo} value={input} onChange={Event => setInput(Event.target.value)} />\r\n                        </FormControl> \r\n                        <Button disabled={!input} variant=\"contained\" color='primary' type='submit' onClick={updateTodo}>Update Todo</Button>\r\n                    </form>\r\n                </div>\r\n        </Modal>\r\n\r\n        <List className='todo_list'>\r\n            <ListItem>\r\n                <ListItemAvatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={props.text.todo} secondary=\"Tasks\" />\r\n                <div className={classes.root}>\r\n                    <Button startIcon={<EditIcon />} variant=\"contained\" color=\"primary\" onClick={e => setOpen(true)}>\r\n                        Edit\r\n                    </Button>\r\n                    <Button startIcon={<DeleteIcon />} variant=\"contained\" color=\"secondary\" onClick={Event => db.collection('todos').doc(props.text.id).delete()}>\r\n                        Delete\r\n                    </Button>\r\n                </div>\r\n            </ListItem>\r\n        </List>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport { Button, FormControl, Input, InputLabel } from '@material-ui/core';\nimport Todo from './Todo';\nimport db from './firebase';\nimport firebase from 'firebase'\nimport AddCircleRoundedIcon from '@material-ui/icons/AddCircleRounded';\n\nfunction App() {\n\n  const [todos, setTodos] = useState([])\n  const [input, setInput] = useState('');\n\n  // kur te hapet website-i, duhet me shiku databazen edhe me i morr te dhenat\n  // ose me i fshi prej databazes varesisht prej qka don me bo perdoruesi\n  useEffect(() => {\n    //kjo pjese e kodit ekzekutohet kur te haper website-i\n    db.collection('todos').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n      setTodos(snapshot.docs.map(doc => ({id: doc.id, todo: doc.data().todo})))\n    })\n  }, [])\n  \n  const addTodo = (Event) =>{\n    //funksioni ekzekutohet kur te klikohet butoni\n    Event.preventDefault(); //nuk e bon refresh faqen nese shton sene tu e kliku enter\n    db.collection('todos').add({\n      todo: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n     setTodos([...todos, input]);//i shton senet ne liste\n     setInput(''); //e pastron inputin\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Todo App</h1>\n\n      <form>\n      <FormControl>\n        <InputLabel>Write a todo</InputLabel>\n        <Input value={input} onChange={Event => setInput(Event.target.value)} />\n      </FormControl>\n        <Button startIcon={<AddCircleRoundedIcon />} disabled={!input} variant=\"contained\" color=\"primary\" type='submit' onClick={addTodo}>\n          Add Todo\n        </Button>\n      </form>\n      \n\n      <ul>\n        {todos.map(todo => (\n          <Todo text={todo} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}